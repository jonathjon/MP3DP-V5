###  V1 Engineering MP3DP V5  ###
###                           ###


### BTT Manta M8P, CB1 EMMC, EBB36   ###

#################################################################################################################

###   MCU   ###

[mcu]
canbus_uuid: 0ceb5f6e6c44

[mcu EBBCan]
canbus_uuid: d8d5848615b3

[mcu CB1]
serial: /tmp/klipper_host_mcu

##################################################################################################################

###   Printer   ###

[printer]
kinematics: corexy
max_velocity: 350
max_accel: 4000
max_z_velocity: 50
max_z_accel: 300

##################################################################################################################

###   Included Files   ###

[include mainsail.cfg]
[display_status]
[gcode_arcs]
resolution: 1
[exclude_object]
[include K-ShakeTune/*.cfg]
#[include Smart Orbiter V3.cfg]

##################################################################################################################

###   Virtual SD Card   ###

[virtual_sdcard]
path: /home/biqu/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

##################################################################################################################

###   Stepper Motors   ###

# Motor1
[stepper_x]
step_pin: PE6
dir_pin: !PE5
enable_pin: multi_pin:z_enable
microsteps: 16
rotation_distance: 32
endstop_pin: EBBCan: PB6
position_endstop: -16
position_max: 310
position_min: -16
homing_speed: 50

# Motor2
[stepper_y]
step_pin: PE2
dir_pin: !PE1
enable_pin: !PE4
microsteps: 16
rotation_distance: 32
endstop_pin: ^PF3
position_endstop: 300
position_max: 300
homing_speed: 50

# Motor3
[stepper_z]
step_pin: PB8
dir_pin: PB7
enable_pin: !PE0 
microsteps: 16
rotation_distance: 32
endstop_pin: ^PF2 #probe:z_virtual_endstop
#position_endstop: 10
position_max: 230
position_min: -5.0
homing_speed: 15
second_homing_speed: 5
homing_retract_dist: 5

# Motor4
[stepper_z1]
step_pin: PB4
dir_pin: !PB3
enable_pin: !PB6
microsteps: 16
rotation_distance: 32

# Motor5
[stepper_z2]
step_pin: PG13
dir_pin: !PG12
enable_pin: !PG15
microsteps: 16
rotation_distance: 32

# Extruder
[extruder]  #See Smart Orbiter V3.cfg
step_pin: EBBCan: PD0
dir_pin: EBBCan: PD1
enable_pin: !EBBCan: PD2
microsteps: 32
rotation_distance: 4.69
full_steps_per_rotation: 200
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: EBBCan: PB13
sensor_type: ATC Semitec 104NT-4-R025H42G #EPCOS 100K B57560G104
pullup_resistor: 4700
sensor_pin: EBBCan: PA3
control: pid                         #PID_CALIBRATE HEATER=extruder TARGET=225
pid_Kp: 21.527
pid_Ki: 1.063
pid_Kd: 108.982
min_temp: 0
max_temp: 350
max_extrude_only_distance: 500
max_extrude_only_velocity: 120
max_extrude_only_accel: 3000

###################################################################################################################

###   Stepper Drivers   ###

# Motor1
[tmc5160 stepper_x]
cs_pin: PC13
spi_software_mosi_pin: PG6
spi_software_miso_pin: PG7
spi_software_sclk_pin: PG8
#diag1_pin: PF4
run_current: 1.400

# Motor2
[tmc5160 stepper_y]
cs_pin: PE3
spi_software_mosi_pin: PG6
spi_software_miso_pin: PG7
spi_software_sclk_pin: PG8
#diag1_pin: PF3
run_current: 1.400

# Motor3
[tmc2209 stepper_z]
uart_pin: PB9
#diag_pin: PF2
run_current: 0.850
stealthchop_threshold: 999999

# Motor4
[tmc2209 stepper_z1]
uart_pin: PB5
#diag_pin: PF1
run_current: 0.850
stealthchop_threshold: 999999

# Motor5
[tmc2209 stepper_z2]
uart_pin: PG14
run_current: 0.850
stealthchop_threshold: 999999

# Extruder
[tmc2209 extruder]  #See Smart Orbiter V3.cfg
uart_pin: EBBCan: PA15
interpolate: true
run_current: 0.850
sense_resistor: 0.11
stealthchop_threshold: 0
driver_TBL: 0
driver_HEND: 6
driver_HSTRT: 7
driver_TOFF: 4

######################################################################################################################

###   Multi Pin for Z Brake Relays   ###

[multi_pin z_enable]
pins: !PC14, PA5

######################################################################################################################

###   Heated Bed   ###

[heater_bed]
heater_pin: PA0
sensor_type: ATC Semitec 104GT-2
sensor_pin: PB1
#control: pid           #PID_CALIBRATE HEATER=heater_bed TARGET=60
#pid_Kp: 54.027
#pid_Ki: 0.770
#pid_Kd: 948.182
min_temp: 0
max_temp: 130

######################################################################################################################

###   Fan's   ###

[fan]
pin: EBBCan: PA0

[heater_fan hotend_fan]
pin: EBBCan: PA1
heater: extruder
heater_temp: 50.0

[controller_fan tmc_fan]
pin: PF7
stepper: stepper_x

[temperature_fan CB1]
pin: PF9
sensor_type: temperature_host
#off_below: 0.4
min_temp: 10
max_temp: 90
#target_temp: 60
control: pid
pid_Kp: 2
pid_Ki: 4
pid_Kd: 0.1

[controller_fan Bento_Box]
pin: PF8
idle_timeout: 1500
idle_speed: .75
heater: heater_bed

[fan_generic Chamber_Fan]
pin: PF6

#######################################################################################################################

###   Temperature Sensors   ###

#[temperature_sensor CB1]
#sensor_type: temperature_host
#min_temp: 10
#max_temp: 100

[temperature_sensor mcu_temp]
sensor_type: temperature_mcu
min_temp: 0
max_temp: 100

[temperature_sensor EBB_Temperature]
sensor_type: temperature_mcu
sensor_mcu: EBBCan

[temperature_sensor bed_top]
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PB0

#[temperature_sensor Chamber_Middle]
#sensor_type: AHT10
#   Also use AHT10 for AHT20 and AHT21 sensors.
#i2c_address: 57
#   Default is 56 (0x38). Some AHT10 sensors give the option to use
#   57 (0x39) by moving a resistor.
#i2c_mcu: mcu
#i2c_bus: i2c3
#i2c_software_scl_pin: PC9
#i2c_software_sda_pin: PA8
#i2c_speed:
#   See the "common I2C settings" section for a description of the
#   above parameters.
#aht10_report_time:
#   Interval in seconds between readings. Default is 30, minimum is 5

[temperature_sensor Chamber_Middle]
sensor_type: BME280
i2c_address: 119
#   Default is 118 (0x76). The BMP180, BMP388 and some BME280 sensors
#   have an address of 119 (0x77).
i2c_mcu: mcu
#i2c_bus:
i2c_software_scl_pin: PA8
i2c_software_sda_pin: PC9
#i2c_speed:
#   See the "common I2C settings" section for a description of the
#   above parameters.

[temperature_sensor Chamber_Top]
sensor_pin: PC5
sensor_type: NTC 100K MGB18-104F39050L32
min_temp: 0
max_temp: 100

[temperature_sensor Chamber_Bottom]
sensor_pin: PC4
sensor_type: NTC 100K MGB18-104F39050L32
min_temp: 0
max_temp: 100

[temperature_sensor Bento_Box_intake]
sensor_pin: PA7
sensor_type: NTC 100K MGB18-104F39050L32
min_temp: 0
max_temp: 100

########################################################################################################################

###   Probe   ###

#[output_pin probe_enable]
#pin: EBBCan: PB9
#value: 0

#[gcode_macro Probe_Deploy]
#gcode:
#	SET_PIN PIN=probe_enable VALUE=1

#[gcode_macro Probe_Stow]
#gcode:
#	SET_PIN PIN=probe_enable VALUE=0
	
#[probe]
#pin: ^!EBBCan: PB8
#deactivate_on_each_sample: False
#x_offset: 7
#y_offset: -24
#z_offset: 1
#speed: 5
#activate_gcode:
#	Probe_Deploy
#    G4 P500  #Allow 500 milliseconds for the probe to deploy
#deactivate_gcode:
#	Probe_Stow

#[bltouch]
#sensor_pin: ^EBBCan:PB8
#control_pin: EBBCan:PB9
#z_offset: 2.600
#stow_on_each_sample: false
#probe_with_touch_mode: true
#x_offset: 55
#y_offset: 0
#speed: 5
#lift_speed: 10
#samples: 2
#sample_retract_distance: 10
#samples_tolerance_retries: 4

[probe_eddy_current btt_eddy]
sensor_type: ldc1612
z_offset: 1
i2c_mcu: EBBCan
i2c_bus: i2c3_PB3_PB4
x_offset: -22.25
y_offset: -16
data_rate: 500



#########################################################################################################################

###   Idle Timeout   ###

[idle_timeout]
timeout: 960000

#########################################################################################################################

###   Filament Sensor   ###

[filament_switch_sensor switch_sensor]
switch_pin: ^PF0
pause_on_runout: false
runout_gcode: PAUSE

[filament_motion_sensor motion_sensor]
switch_pin: ^PC15
detection_length: 4.5
extruder: extruder
pause_on_runout: false
runout_gcode: PAUSE

##########################################################################################################################

###   Neopixels   ###

[neopixel outside]
pin: PA9
chain_count: 79
color_order: RGB
initial_RED: 0.5
initial_GREEN: 0.5
initial_BLUE: 0.5

[neopixel back]
pin: PD15
chain_count: 28
color_order: RGB
initial_RED: 0.5
initial_GREEN: 0.5
initial_BLUE: 0.5

###########################################################################################################################

###   Bed Leveling   ###

[z_tilt]
z_positions: -16, 25
             300, 25
             150, 290
points:       40, 35
             309, 35
             177, 295
speed: 250
horizontal_move_z: 3
retries: 8
retry_tolerance: 0.01

[bed_mesh]
speed: 200
horizontal_move_z: 2
mesh_min:  20, 20
mesh_max: 280,283
probe_count: 10, 10
algorithm: bicubic
bicubic_tension: 0.2
fade_start: 2
fade_end: 5
fade_target: 0
adaptive_margin: 5
scan_overshoot: 6

############################################################################################################################

###   Z Safe Home   ###

[safe_z_home]
home_xy_position: -13, 267
speed: 150
#z_hop: 2
#z_hop_speed: 20

#############################################################################################################################

###   Input Shaper   ###

[input_shaper]
shaper_freq_x: 84.4
shaper_type_x: mzv
shaper_freq_y: 64.0
shaper_type_y: mzv

#############################################################################################################################

###   ADXL345   ###

[adxl345]
cs_pin: EBBCan: PB12
spi_software_sclk_pin: EBBCan: PB10
spi_software_mosi_pin: EBBCan: PB11
spi_software_miso_pin: EBBCan: PB2
axes_map: x,y,z

[resonance_tester]
accel_chip: adxl345
probe_points:
    146, 150, 50

#[mcu ampon]
#serial: /dev/serial/by-id/usb-Anchor_Ampon-if00

#[adxl345]
#cs_pin: ampon:CS

#[resonance_tester]
#accel_chip: adxl345
#probe_points: 160, 150, 50

#############################################################################################################################

###   Macro's   ###

#Genereted with https://config.gab-3d.com/
#
# https://config.gab-3d.com/share/e7e8b99e-2bd3-4cb1-95bd-a1612567b50d

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration: 1
gcode:
    SET_FILAMENT_SENSOR SENSOR=motion_sensor ENABLE=0

[gcode_macro PRINT_START]
gcode:
  {% set BED = params.BED_TEMP|int %}
  {% set EXTRUDER = params.EXTRUDER_TEMP|int %}
  M104 S{EXTRUDER}  ;Set extruder temperature
  M190 S{BED}  ;Set bed temperature and wait
  G28  ;Home all Axes
  Z_TILT_ADJUST  ;Z Tilt adjust
  BED_MESH_CALIBRATE ADAPTIVE=1
  _PURGE_CLEAN_NOZZLE
  SET_FILAMENT_SENSOR SENSOR=motion_sensor ENABLE=1

[gcode_macro Z_TILT_ADJUST]
rename_existing: Z_TILT_ADJUST_1
gcode:
  {% if printer["gcode_macro status_leveling"] != null %}
    status_leveling
  {% endif %}
    Z_TILT_ADJUST_1 { rawparams }
  {% if printer["gcode_macro status_ready"] != null %}
    status_ready
  {% endif %}


    
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

[gcode_macro PRINT_END]
gcode:
  M400  ;Clear buffer
  TURN_OFF_HEATERS  ;Turn off heaters
  M106 S0  ;Part cooling fan speed
  PARK_CENTER_REAR  ;Park central rear
  G0 Z229 F3000  ;Move Up
  SET_FILAMENT_SENSOR SENSOR=motion_sensor ENABLE=0

[gcode_macro PARK_CENTER_REAR]
gcode:
    {% if printer["gcode_macro status_busy"] != null %}
      status_busy
    {% endif %}
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}

    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  
    {% if printer["gcode_macro status_ready"] != null %}
    status_ready
    {% endif %}

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    G0 Z10
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} #ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

[led_effect progress_bar]
leds:
    neopixel:back
autostart:                          true
frame_rate:                         24
layers:
    progress  -1  0 add         ( 0.75, 0.75, 0.75),( 0, 1, 0)
    static     0  0 top         ( 0.1, 0.1, 0.1)

[gcode_macro update_git]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh $0"
timeout: 90.0
verbose: True

[gcode_macro CLEAN_NOZZLE]
variable_start_x: -14
variable_start_y: 130
variable_start_z: 9
variable_wipe_dist: 60
variable_wipe_qty: 10
variable_wipe_spd: 200
variable_raise_distance: 20

gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}
 
 G90                                            ; absolute positioning
 ## Move nozzle to start position
 G1 X{start_x} Y{start_y} F6000
 G1 Z{start_z} F1500

 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   G1 Y{start_y + wipe_dist} F{wipe_spd * 60}
   G1 Y{start_y} F{wipe_spd * 60}
 {% endfor %}

 ## Raise nozzle
 G1 Z{raise_distance}

[gcode_macro _PURGE_CLEAN_NOZZLE]
variable_start_x: -14
variable_start_y: 135
variable_start_z: 9
variable_wipe_dist: 60
variable_wipe_qty: 10
variable_wipe_spd: 200
variable_raise_distance: 20

gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}
 
 G90                                            ; absolute positioning
 ## Move nozzle to start position
 G1 X{start_x} Y{start_y} F6000
 G1 Z{start_z} F1500

 G1 Y125 F6000 ; Move nozzle over purge bucket
 G1 E30 F1000 ; Nozzle Purge
 G4 P2500 ; Finish oozing

 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   G1 Y{start_y + wipe_dist} F{wipe_spd * 60}
   G1 Y{start_y} F{wipe_spd * 60}
 {% endfor %}

 ## Raise nozzle
 G1 Z{raise_distance}

#################################################################################
####################### Orbiter V3 Specific Macros ##############################
#################################################################################

[board_pins SMARTORBITER3] 
aliases: ### define here the pins to which the SO board is connected #######
  filament_sensor_pin = EBBCan:PB5,  # BROWN signal shall be connected to a digital I/O pin
  filament_unload_pin = EBBCan:PB7,  # GREY signal shall be connected to a digital I/O pin
  RGB_pin = EBBCan:PD3,              # YELLOW signal shall be connected to a digital I/O pin
#  extruder_temperature_pin =   ,    # WHITE signal shall be connected to a temperature sensing input pin
  hotend_lit_pin = EBBCan:PB8,       # ORANGE signal shall be connected to a digital I/O pin

# Orbiter MACRO CONFIGURABLES #

[gcode_macro _SENSOR_VARIABLES]         # change here macro configurables, enable disable functions!*************************
variable_filament_load_temp     :220    # temperature to heat up hotend for filament loading, default is 235
variable_filament_unload_temp   :185    # temperature to heat up hotend for filament un-loading, default is 185
variable_filament_load_min_temp :195    # minimum hotend set temperature allowed in filament load macro, default is 190
variable_nozzle_purge_length    :60     # filament extrude amount during load sequenc, hotend purge from old filament, default is 100
variable_nozzle_purge_speed     :300    # filament extrude speed in mm/min adjust this value lower if flow is too high and extruder skips during loading, default is 300
variable_disable_autoload       :False  # disable filament autoload feature by setting this variable True
variable_disable_runnout        :False  # disable runnout by setting this variable True
variable_disable_autounload     :False  # disable auto unload filament by setting this variable to True
variable_enable_beep            :False  # uses M300 sound feature, set it True to enable
variable_SENSOR_RGB_LED         :True  # enable and configure RGB LED pin and type for filament status indication
variable_park_position_x        :10     # edit your X parking position here for pause macro trigerred by runnout
variable_park_position_y        :10     # edit your Y parking position here for pause macro trigerred by runnout
variable_park_lift_z            :10     # edit your Z lift amount for parking position here, default is 10
variable_park_retraction        :1      # edit your retraction amount for parking, default is 1
gcode:


[force_move]
enable_force_move: True

[neopixel SO3RGB]
pin: RGB_pin
chain_count: 1
color_order: GRB
initial_RED: 0.5
initial_GREEN: 0.5
initial_BLUE: 0.5

[thermistor SO3Thermistor]
temperature1: 25
resistance1: 100000
beta: 3950

[temperature_sensor SO3]
sensor_type: SO3Thermistor
sensor_pin: extruder_temperature_pin
pullup_resistor: 4700
min_temp: 0
max_temp: 85

[output_pin HOT_LED]
pin: hotend_lit_pin
value: 1
shutdown_value: 0

#################################################################################################################################
############################################## Runout and autoload macros #######################################################
#################################################################################################################################

#*****************************initial RGN LED set at printer start****************************************************************
[delayed_gcode startup_RGB_SET]
initial_duration: 2
gcode:    
  {% if printer["filament_switch_sensor O2Senzor_V2"].filament_detected==true %}
      SET_LED LED=SO3RGB RED=0.0 GREEN=1.0 BLUE=0.0
  {% else %}
      SET_LED LED=SO3RGB RED=1.0 GREEN=0.0 BLUE=0.0
  {% endif %}   


#***********************************filament swicth definition***********************************************************

[filament_switch_sensor O2Senzor_V2]
switch_pin: filament_sensor_pin
pause_on_runout: False
runout_gcode: runnout_init
insert_gcode: filament_load_init
event_delay: 1.0
pause_delay: 0.1


#////////////////////////////////////////Filament Unload macros/////////////////////////////////////////////////
[gcode_button filament_unload]
pin: !filament_unload_pin 
release_gcode:  # filament unload procedure   
  SET_LED LED=SO3RGB RED=0.0 GREEN=0.5 BLUE=0.5
  filament_unload_init
press_gcode: # do not add any macro call here

[gcode_macro runnout_init]
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %} 
  SET_LED LED=SO3RGB RED=1.0 GREEN=0.0 BLUE=0.0
  {% if (printer.print_stats.state == "printing") %}      
    {% if(sensor.disable_runnout|lower == 'false') %}
      filament_change_state1
    {% else %}
    M118 Filament runnout is disabled in the sensor config file!   
    {% endif %}     
  {% endif %} 
  UPDATE_DELAYED_GCODE ID=clear_loadbusy DURATION=2
  UPDATE_DELAYED_GCODE ID=clear_unloadbusy DURATION=2    
  SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=filamentpresent VALUE=0

[gcode_macro filament_change_state1]
variable_changebusy: 0
variable_temp_target: 0
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}  
  {% if changebusy == 0 %}
    PAUSE # call printer pause macro      
    SET_GCODE_VARIABLE MACRO=filament_change_state1 VARIABLE=changebusy VALUE=1       
    M118 Filament runnout!       
    filament_change_state2     # comment this line if you do not want to automatically unload filament in case there is a runnout detected.
  {% else %}
  {% endif %}

[gcode_macro filament_change_state2]
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}  
  SET_GCODE_VARIABLE MACRO=filament_load VARIABLE=loadbusy VALUE=1      
  {% if (sensor.enable_beep|lower == 'true') %} 
    M300 # beep sound
  {% endif %}
  M118 Unloading filament...   
  M83
  G92 E0     
  {% if (printer.extruder.can_extrude|lower != 'true')%} # checing for minimum extrusion temperature
        # check if temperature is over the minimum extrusion temp. min_extrude_temp must be defined in the extruder config (to about 185)
      M118 Hotend heating!        
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={sensor.filament_unload_temp} # restore user temp if it was set before loading
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={sensor.filament_unload_temp} #wait for reaching filament unload temp
      {% endif %}     
  {% if(printer.extruder.target == 0) %} # checing for set temperature if is zero than set to 200 / hotend hot but cooling due to set target temp 0
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={sensor.filament_unload_temp} # restore user temp if it was set before loading
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={sensor.filament_unload_temp} #wait for reaching filament unload temp
  {% endif %} 
 # filament_unload_procedure  # call macro of filamnet unload procedure        
  M400   
  M118 Load new filament! Wait until is loaded, then resume printing.  
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0 # swicth off heater
  UPDATE_DELAYED_GCODE ID=clear_loadbusy DURATION=2.5 # timing must be set to clear delay plus 0.5s. is due to wait to remove filament before starting load even in case there is a blob at the tip of the extracted filament which woudl trigger the sensor twice

#############################################END filament auto load macro section END***********************************************************

[gcode_macro filament_load_init]
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}  
  SET_LED LED=SO3RGB RED=0.0 GREEN=1.0 BLUE=0.0
  {% if (printer.print_stats.state != "printing") %}
    {% if(sensor.disable_autoload|lower == 'false') %}
      filament_load
    {% else %}
    M118 Filament auto-load is disabled in the sensor config file!   
    {% endif %} 
  {% else %}    
    M118 Printing! Can't load filament right now!    
  {% endif %} 
  SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=filamentpresent VALUE=1
  UPDATE_DELAYED_GCODE ID=clear_changebusy DURATION=2  


[gcode_macro filament_load]
variable_loadbusy: 0
variable_USER_TEMP: 0
variable_LOAD_TEMP: 0
gcode:  
    SET_LED LED=SO3RGB RED=0.7 GREEN=0.5 BLUE=0.0
    {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
    {% if loadbusy == 0 %} # requires [virtual_sdcard] 
      SET_GCODE_VARIABLE MACRO=filament_load VARIABLE=loadbusy VALUE=1
      SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=unloadbusy VALUE=1    
      {% set USER_TEMP = printer.extruder.target %} # save user set temperature before loading
      {% set LOAD_TEMP = 0 %}       
        {% if (printer.extruder.can_extrude|lower != 'true') or (printer.extruder.target < sensor.filament_load_min_temp) %} # checking for minimum extrusion temperature
        # check if temperature is over the minimum extrusion temp. min_extrude_temp must be defined in the extruder config (to about 185)                        
          SET_HEATER_TEMPERATURE HEATER=extruder TARGET={sensor.filament_load_temp} # set user defined load temperature
          {% set LOAD_TEMP = sensor.filament_load_temp %} # save user set temperature before loading           
         M118 Hotend heating! 
      {% endif %}     
    {% if (sensor.enable_beep|lower == 'true') %} 
      M300 # beep sound
    {% endif %}
    M118 Filament loading!  
    M82           #set extruder to absolute mode
    G92 E0
    G4 P1500        # wait for 1.5 seconds
    FORCE_MOVE STEPPER=extruder DISTANCE=15 VELOCITY=10 ACCEL=1000  # load filament inside the gears force move needs to be enabled    
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={LOAD_TEMP} # wait for reaching set temperature    
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={USER_TEMP} # wait for reaching set temperature    
    G1 E{sensor.nozzle_purge_length} F{sensor.nozzle_purge_speed} # extrude preconfigured purge length
    M400 # wait to complete nozzle purge
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={USER_TEMP} # restore user temp if it was set before loading
    M118 Filament load complete!   
    SET_LED LED=SO3RGB RED=0.0 GREEN=1.0 BLUE=0.0
    UPDATE_DELAYED_GCODE ID=clear_unloadbusy DURATION=2   
    UPDATE_DELAYED_GCODE ID=clear_loadbusy DURATION=2  
    {% else %}
      M118 Filament already loaded!    
    {% endif %}  
#############################################END filament auto load macro section END***********************************************************

#############################################filament auto unload macro section*****************************************************************
[gcode_macro filament_unload_procedure]
gcode:
    G92 E0
    G0 E-9 F3600 # retract fast 9mm
    G4 P2000 # Wait 2 sec for filament cooling
    G0 E9 F3000 # extruder 9mm to crush filament end
    G0 E-5 F3000 #extract filament to cold end fast
    G0 E-10 F300 #extract filament to cold end slow
    G4 P5000 # Wait 5 sec for filament cooling
    G0 E-25 F3000 	#extract filament completely  


[gcode_macro filament_unload_init]
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
  {% if (printer.print_stats.state != "printing") %}
    {% if(sensor.disable_autounload|lower == 'false') %}
      filament_unload
    {% else %}
      M118 Filament auto-unload is disabled in the sensor config file!   
    {% endif %} 
  {% else %}   
     M118 Printing! Can't unload filament right now!
  {% endif %}

[gcode_macro filament_unload] 
variable_unloadbusy: 0
variable_filamentpresent: 0
gcode:
    {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
    {% if unloadbusy == 0 %} # requires [virtual_sdcard]  
      SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=unloadbusy VALUE=1
      SET_GCODE_VARIABLE MACRO=filament_load VARIABLE=loadbusy VALUE=1
      {% if (sensor.enable_beep|lower == 'true') %} 
        M300 # beep sound
      {% endif %}
      M118 Filament unloading!    
      M83
      G92 E0       
      {% if ((printer.extruder.can_extrude|lower != 'true') or (printer.extruder.target == 0))%} # checing for minimum extrusion temperature
        # check if temperature is over the minimum extrusion temp. min_extrude_temp must be defined in the extruder config (to about 185)
        M118 Hotend heating!          
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={sensor.filament_unload_temp} # restore user temp if it was set before loading
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={sensor.filament_unload_temp} # wait for reaching configured unload temperature
      {% endif %}  
      filament_unload_procedure # call macro of filamnet unload procedure     
      M104 S0 T0 
      M400 # wait to complete unload
      M118 Filament unload complete!   
      UPDATE_DELAYED_GCODE ID=clear_unloadbusy DURATION=2   
      UPDATE_DELAYED_GCODE ID=clear_loadbusy DURATION=2        
      UPDATE_DELAYED_GCODE ID=unload_RGB_update DURATION=2    
      SET_LED LED=SO3RGB RED=0.0 GREEN=0.0 BLUE=1.0
    {% else %}      
      M118 Nothing to unload!
    {% endif %}

#############################################END filament auto unload macro section END***********************************************************

[delayed_gcode unload_RGB_update]
gcode: # change RGB led to RED after filament is phisicaly removed after unload
  {% if printer["filament_switch_sensor O2Senzor_V2"].filament_detected==true %}
      UPDATE_DELAYED_GCODE ID=unload_RGB_update DURATION=2       
  {% else %}
      SET_LED LED=SO3RGB RED=1.0 GREEN=0.0 BLUE=0.0
  {% endif %} 


[delayed_gcode clear_unloadbusy]
gcode:
  SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=unloadbusy VALUE=0
  #M118 Clear Unload busy! 

[delayed_gcode clear_changebusy]
gcode:
  SET_GCODE_VARIABLE MACRO=filament_change_state1 VARIABLE=changebusy VALUE=0
  #M118 Clear Load busy!  

[delayed_gcode set_loadbusy]
gcode:
  SET_GCODE_VARIABLE MACRO=filament_load VARIABLE=loadbusy VALUE=1
  #M118 Set Load busy! 

[delayed_gcode clear_loadbusy]
gcode:
  SET_GCODE_VARIABLE MACRO=filament_load VARIABLE=loadbusy VALUE=0
  #M118 Clear Load busy! 
 

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	-0.007717, 0.042283, 0.047283, 0.052283, 0.047283
#*# 	0.107283, 0.102283, 0.067283, 0.047283, -0.017717
#*# 	0.092283, 0.242283, 0.182283, 0.122283, 0.042283
#*# 	0.277283, 0.232283, 0.172283, 0.122283, 0.002283
#*# 	0.082283, 0.042283, -0.012717, -0.092717, -0.142717
#*# x_count = 5
#*# y_count = 5
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 55.0
#*# max_x = 250.0
#*# min_y = 10.0
#*# max_y = 290.0
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 62.052
#*# pid_ki = 1.682
#*# pid_kd = 572.428
#*#
#*# [stepper_z]
#*# position_endstop = 10.600
#*#
#*# [probe_eddy_current btt_eddy]
#*# reg_drive_current = 15
#*# calibrate =
#*# 	0.050000:3213909.553,0.100000:3213603.196,0.150000:3212888.376,
#*# 	0.200000:3212261.016,0.250000:3211558.921,0.300000:3210868.508,
#*# 	0.350000:3210270.290,0.400000:3209716.845,0.450000:3209063.374,
#*# 	0.500000:3208475.698,0.550000:3207874.421,0.600000:3207273.013,
#*# 	0.650000:3206698.868,0.700000:3206210.198,0.750000:3205716.804,
#*# 	0.800000:3205216.919,0.850000:3204704.244,0.900000:3204187.758,
#*# 	0.950000:3203682.026,1.000000:3203264.842,1.050000:3202811.460,
#*# 	1.100000:3202370.481,1.150000:3201903.614,1.200000:3201475.239,
#*# 	1.250000:3200990.137,1.300000:3200630.232,1.350000:3200263.996,
#*# 	1.400000:3199824.116,1.450000:3199447.388,1.500000:3199036.942,
#*# 	1.550000:3198703.802,1.600000:3198334.987,1.650000:3197985.897,
#*# 	1.700000:3197685.198,1.750000:3197290.226,1.800000:3196954.685,
#*# 	1.850000:3196651.814,1.900000:3196308.536,1.950000:3195998.883,
#*# 	2.000000:3195737.326,2.050000:3195437.819,2.100000:3195166.800,
#*# 	2.150000:3194870.061,2.200000:3194553.025,2.250000:3194304.073,
#*# 	2.300000:3194052.733,2.350000:3193814.806,2.400000:3193524.932,
#*# 	2.450000:3193237.865,2.500000:3193006.834,2.550000:3192752.471,
#*# 	2.600000:3192524.692,2.650000:3192328.412,2.700000:3192100.839,
#*# 	2.750000:3191866.588,2.800000:3191645.949,2.850000:3191434.519,
#*# 	2.900000:3191153.962,2.950000:3191014.024,3.000000:3190848.739,
#*# 	3.050000:3190614.191,3.100000:3190415.849,3.150000:3190233.084,
#*# 	3.200000:3190023.608,3.250000:3189856.642,3.300000:3189697.095,
#*# 	3.350000:3189485.865,3.400000:3189341.176,3.450000:3189143.843,
#*# 	3.500000:3188949.844,3.550000:3188826.846,3.600000:3188700.313,
#*# 	3.650000:3188554.494,3.700000:3188368.934,3.750000:3188200.864,
#*# 	3.800000:3188048.380,3.850000:3187895.751,3.900000:3187773.983,
#*# 	3.950000:3187620.746,4.000000:3187493.518,4.050000:3187378.695
#*# calibration_temp = 0.000000
