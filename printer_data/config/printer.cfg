###  V1 Engineering MP3DP V5  ###
###                           ###


### BTT Manta M8P, CB1 EMMC, EBB36   ###

#################################################################################################################

###   MCU   ###

[mcu]
canbus_uuid: 0ceb5f6e6c44

[mcu EBBCan]
canbus_uuid: d8d5848615b3

[mcu CB1]
serial: /tmp/klipper_host_mcu

##################################################################################################################

###   Printer   ###

[printer]
kinematics: corexy
max_velocity: 350
max_accel: 12000
max_z_velocity: 50
max_z_accel: 500

##################################################################################################################

###   Included Files   ###

[include mainsail.cfg]
[display_status]
[gcode_arcs]
resolution: 1
[exclude_object]
[include K-ShakeTune/*.cfg]

##################################################################################################################

###   Virtual SD Card   ###

[virtual_sdcard]
path: /home/biqu/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

##################################################################################################################

###   Stepper Motors   ###

# Motor1
[stepper_x]
step_pin: PE6
dir_pin: !PE5
enable_pin: multi_pin:z_enable
microsteps: 16
rotation_distance: 32
endstop_pin: EBBCan: PB6
position_endstop: -16
position_max: 315
position_min: -16
homing_speed: 50

# Motor2
[stepper_y]
step_pin: PE2
dir_pin: !PE1
enable_pin: !PE4
microsteps: 16
rotation_distance: 32
endstop_pin: ^PF3
position_endstop: 300
position_max: 300
homing_speed: 50

# Motor3
[stepper_z]
step_pin: PB8
dir_pin: PB7
enable_pin: !PE0 
microsteps: 16
rotation_distance: 32
endstop_pin: probe:z_virtual_endstop
#position_endstop: -5
position_max: 230
position_min: -5.0
homing_speed: 50
second_homing_speed: 10
homing_retract_dist: 5

# Motor4
[stepper_z1]
step_pin: PB4
dir_pin: !PB3
enable_pin: !PB6
microsteps: 16
rotation_distance: 32

# Motor5
[stepper_z2]
step_pin: PG13
dir_pin: !PG12
enable_pin: !PG15
microsteps: 16
rotation_distance: 32

# Extruder
[extruder]
step_pin: EBBCan: PD0
dir_pin: EBBCan: PD1
enable_pin: !EBBCan: PD2
microsteps: 16
rotation_distance: 3.43
nozzle_diameter: 0.600
filament_diameter: 1.750
heater_pin: EBBCan: PB13
sensor_type: EPCOS 100K B57560G104F
sensor_pin: EBBCan: PA3
#control: pid
#pid_Kp: 21.527
#pid_Ki: 1.063
#pid_Kd: 108.982
min_temp: 0
max_temp: 250
max_extrude_cross_section: 250
max_extrude_only_distance: 250

###################################################################################################################

###   Stepper Drivers   ###

# Motor1
[tmc5160 stepper_x]
cs_pin: PC13
spi_software_mosi_pin: PG6
spi_software_miso_pin: PG7
spi_software_sclk_pin: PG8
#diag1_pin: PF4
run_current: 1.400

# Motor2
[tmc5160 stepper_y]
cs_pin: PE3
spi_software_mosi_pin: PG6
spi_software_miso_pin: PG7
spi_software_sclk_pin: PG8
#diag1_pin: PF3
run_current: 1.400

# Motor3
[tmc2209 stepper_z]
uart_pin: PB9
#diag_pin: PF2
run_current: 0.850
stealthchop_threshold: 999999

# Motor4
[tmc2209 stepper_z1]
uart_pin: PB5
#diag_pin: PF1
run_current: 0.850
stealthchop_threshold: 999999

# Motor5
[tmc2209 stepper_z2]
uart_pin: PG14
run_current: 0.850
stealthchop_threshold: 999999

# Extruder
[tmc2209 extruder]
uart_pin: EBBCan: PA15
run_current: 0.650

######################################################################################################################

###   Multi Pin for Z Brake Relays   ###

[multi_pin z_enable]
pins: !PC14, PA5

######################################################################################################################

###   Heated Bed   ###

[heater_bed]
heater_pin: PA0
sensor_type: ATC Semitec 104GT-2
sensor_pin: PB1
control: pid
pid_Kp: 54.027
pid_Ki: 0.770
pid_Kd: 948.182
min_temp: 0
max_temp: 130

######################################################################################################################

###   Fan's   ###

[fan]
pin: EBBCan: PA1

[heater_fan hotend_fan]
pin: EBBCan: PA0
heater: extruder
heater_temp: 50.0

[controller_fan tmc_fan]
pin: PF7
stepper: stepper_x

[temperature_fan CB1]
pin: PF9
sensor_type: temperature_host
#off_below: 0.4
min_temp: 10
max_temp: 90
#target_temp: 60
control: pid
pid_Kp: 2
pid_Ki: 4
pid_Kd: 0.1

[controller_fan Bento_Box]
pin: PF8
idle_timeout: 1500
idle_speed: .75
heater: heater_bed

#######################################################################################################################

###   Temperature Sensors   ###

#[temperature_sensor CB1]
#sensor_type: temperature_host
#min_temp: 10
#max_temp: 100

[temperature_sensor mcu_temp]
sensor_type: temperature_mcu
min_temp: 0
max_temp: 100

[temperature_sensor EBB_Temperature]
sensor_type: temperature_mcu
sensor_mcu: EBBCan

[temperature_sensor bed_top]
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PB0

#[temperature_sensor Chamber_Middle]
#sensor_type: AHT10
#   Also use AHT10 for AHT20 and AHT21 sensors.
#i2c_address: 57
#   Default is 56 (0x38). Some AHT10 sensors give the option to use
#   57 (0x39) by moving a resistor.
#i2c_mcu: mcu
#i2c_bus: i2c3
#i2c_software_scl_pin: PC9
#i2c_software_sda_pin: PA8
#i2c_speed:
#   See the "common I2C settings" section for a description of the
#   above parameters.
#aht10_report_time:
#   Interval in seconds between readings. Default is 30, minimum is 5

[temperature_sensor Chamber_Middle]
sensor_type: BME280
i2c_address: 119
#   Default is 118 (0x76). The BMP180, BMP388 and some BME280 sensors
#   have an address of 119 (0x77).
i2c_mcu: mcu
#i2c_bus:
i2c_software_scl_pin: PA8
i2c_software_sda_pin: PC9
#i2c_speed:
#   See the "common I2C settings" section for a description of the
#   above parameters.


########################################################################################################################

###   Probe   ###

#[output_pin probe_enable]
#pin: EBBCan: PB9
#value: 0

#[gcode_macro Probe_Deploy]
#gcode:
#	SET_PIN PIN=probe_enable VALUE=1

#[gcode_macro Probe_Stow]
#gcode:
#	SET_PIN PIN=probe_enable VALUE=0
	
#[probe]
#pin: ^!EBBCan: PB8
#deactivate_on_each_sample: False
#x_offset: 7
#y_offset: -24
#z_offset: 1
#speed: 5
#activate_gcode:
#	Probe_Deploy
#    G4 P500  #Allow 500 milliseconds for the probe to deploy
#deactivate_gcode:
#	Probe_Stow

[bltouch]
sensor_pin: ^EBBCan:PB8
control_pin: EBBCan:PB9
#z_offset: 2.600
stow_on_each_sample: false
probe_with_touch_mode: true
x_offset: 55
y_offset: 0
speed: 10
lift_speed: 20
samples: 2
#sample_retract_distance: 10
samples_tolerance_retries: 4
#########################################################################################################################

###   Idle Timeout   ###

[idle_timeout]
timeout: 960000

#########################################################################################################################

###   Filament Sensor   ###

[filament_switch_sensor switch_sensor]
switch_pin: ^PF0
pause_on_runout: false
runout_gcode: PAUSE

[filament_motion_sensor motion_sensor]
switch_pin: ^PC15
detection_length: 4
extruder: extruder
pause_on_runout: false
runout_gcode: PAUSE

##########################################################################################################################

###   Neopixels   ###

[neopixel outside]
pin: CB1: gpio259
chain_count: 79
color_order: GRB
initial_RED: 0.5
initial_GREEN: 0.5
initial_BLUE: 0.5

[neopixel back]
pin: PD15
chain_count: 29
color_order: GRB
initial_RED: 0.5
initial_GREEN: 0.5
initial_BLUE: 0.5

###########################################################################################################################

###   Bed Leveling   ###

[z_tilt]
z_positions: -16, 25
             300, 25
             150, 300
points:      -16, 20
             245, 20
              95, 295
speed: 175
horizontal_move_z: 10
retries: 8
retry_tolerance: 0.01

[bed_mesh]
speed: 150
horizontal_move_z: 10
mesh_min:  55, 10
mesh_max: 250,290
probe_count: 5, 5
algorithm: bicubic
bicubic_tension: 0.2
fade_start: 1
fade_end: 10
fade_target: 0

############################################################################################################################

###   Z Safe Home   ###

[safe_z_home]
home_xy_position: 100, 150
speed: 150
#z_hop: 2
#z_hop_speed: 20

#############################################################################################################################

###   Input Shaper   ###

[input_shaper]
shaper_freq_x: 84.4
shaper_type_x: mzv
shaper_freq_y: 64.0
shaper_type_y: mzv

#############################################################################################################################

###   ADXL345   ###

[adxl345]
cs_pin: EBBCan: PB12
spi_software_sclk_pin: EBBCan: PB10
spi_software_mosi_pin: EBBCan: PB11
spi_software_miso_pin: EBBCan: PB2
axes_map: x,y,z

[resonance_tester]
accel_chip: adxl345
probe_points:
    160, 150, 50

#[mcu ampon]
#serial: /dev/serial/by-id/usb-Anchor_Ampon-if00

#[adxl345]
#cs_pin: ampon:CS

#[resonance_tester]
#accel_chip: adxl345
#probe_points: 160, 150, 50

#############################################################################################################################

###   Macro's   ###

#Genereted with https://config.gab-3d.com/
#
# https://config.gab-3d.com/share/e7e8b99e-2bd3-4cb1-95bd-a1612567b50d

[gcode_macro PRINT_START]
gcode:
  {% set BED = params.BED_TEMP|int %}
  {% set EXTRUDER = params.EXTRUDER_TEMP|int %}
  M104 S{EXTRUDER}  ;Set extruder temperature
  M190 S{BED}  ;Set bed temperature and wait
  G28  ;Home all Axes
  Z_TILT_ADJUST  ;Z Tilt adjust
  BED_MESH_CALIBRATE  ;Adaptive Mesh [Auto]
  #_ADAPTIVE_PURGE_V1  ;Adaptive Purge
  #CLEAN_NOZZLE
  _PURGE_CLEAN_NOZZLE

[gcode_macro Z_TILT_ADJUST]
rename_existing: Z_TILT_ADJUST_1
gcode:
  {% if printer["gcode_macro status_leveling"] != null %}
    status_leveling
  {% endif %}
    Z_TILT_ADJUST_1 { rawparams }
  {% if printer["gcode_macro status_ready"] != null %}
    status_ready
  {% endif %}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
#Insane Version 1.1 - 03-Feb-2023
#Based on https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging
variable_buffer: 2
 
gcode:
    # Get bed_mesh config (probe count, mesh_min and mesh_max for x and y
    {% set bedMeshConfig = printer['configfile'].config["bed_mesh"] %} 
    {% set bed_mesh_min = bedMeshConfig.mesh_min %}
    {% set bed_mesh_max = bedMeshConfig.mesh_max %}
    
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
    {% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
    {% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
    {% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
    {% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
    
    
    {% if printer["bed_mesh"].profile_name == '' %}
        { action_respond_info("No existing bed mesh found.") }
        {% set last_area_end_x=-1 %}
    {% endif %}

    {% if printer.toolhead.homed_axes != "xyz" %}
        G28
    {% endif %}

    {% set klicky_available = printer['gcode_macro _Probe_Variables'] != null %}
     
  {% set probeConfig = printer['configfile'].config["probe"] %}
  {% if probeConfig %}
    {% set OffsetX = probeConfig.x_offset|default(0)|float %}
    {% set OffsetY = probeConfig.y_offset|default(0)|float %}
  {% endif %}

	{% set print_min_x = x_min|float %}
	{% set print_min_y = y_min|float %}
	{% set print_max_x = x_max|float %}
	{% set print_max_y = y_max|float %}
    
  {% set mesh_min_x = bed_mesh_min.split(",")[0]|float %}
  {% set mesh_min_y = bed_mesh_min.split(",")[1]|float %}
  {% set mesh_max_x = bed_mesh_max.split(",")[0]|float %}
  {% set mesh_max_y = bed_mesh_max.split(",")[1]|float %}
 
  {% if (print_min_x < mesh_min_x) or (print_max_x > mesh_max_x) or (print_min_y < mesh_min_y) or (print_max_y > mesh_max_y)  %}
        {% set print_min_x = mesh_min_x %}
        {% set print_min_y = mesh_min_y %}
        {% set print_max_x = mesh_max_x %}
        {% set print_max_y = mesh_max_y %}
    {% endif %}
  
  {% if klicky_available %}
        _CheckProbe action=query
        Attach_Probe
    {% elif euclid_available %}
        DEPLOY_PROBE
    {% endif %}
    {% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}

        {% set minimum_probe_count = 3 %}
        {% set medium_probe_count = 5 %}
 
        {% set probe_count = bedMeshConfig.probe_count.split(",") %}
        {% set probe_count_x = probe_count[0]|int %}
        {% if probe_count.__len__() > 1 %}
            {% set probe_count_y = probe_count[1]|int %}
        {% else %}
            {% set probe_count_y = probe_count_x|int %}
        {% endif %}
        {% set relative_reference_index = bedMeshConfig.relative_reference_index %}



        # If print area X is smaller than 75% of the bed size, change to to 5 probe counts for X instead of the default 
        {% if print_max_x - print_min_x < (mesh_max_x - mesh_min_x) * 0.75 %}
            {% set probe_count_x = medium_probe_count %}
        {% endif %}

        # If print area Y is smaller than 75% of the bed size, change to to 5 probe counts for Y instead of the default 
        {% if print_max_y - print_min_y < (mesh_max_y - mesh_min_y) * 0.75 %}
            {% set probe_count_y = medium_probe_count %}
        {% endif %}

        # If print area X is smaller than 50% of the bed size, change to to 3 probe counts for X instead of the default 
        {% if print_max_x - print_min_x < (mesh_max_x - mesh_min_x) * 0.50 %}
            {% set probe_count_x = minimum_probe_count %}
        {% endif %}

        # If print area Y is smaller than 50% of the bed size, change to to 3 probe counts for Y instead of the default 
        {% if print_max_y - print_min_y < (mesh_max_y - mesh_min_y) * 0.50 %}
            {% set probe_count_y = minimum_probe_count %}
        {% endif %}

        {% if print_min_x - buffer >= mesh_min_x %}
            {% set mesh_min_x = print_min_x - buffer %}
        {% endif %}

        {% if print_min_y - buffer >= mesh_min_y %}
            {% set mesh_min_y = print_min_y - buffer %}
        {% endif %}

        {% if print_max_x + buffer <= mesh_max_x %}
            {% set mesh_max_x = print_max_x + buffer %}
        {% endif %}

        {% if print_max_y + buffer <= mesh_max_y %}
            {% set mesh_max_y = print_max_y + buffer %}
        {% endif %}

        { action_respond_info("mesh_min: %s,%s" % (mesh_min_x, mesh_min_y)) }
        { action_respond_info("mesh_max: %s,%s" % (mesh_max_x, mesh_max_y)) }
        { action_respond_info("probe_count: %s,%s" % (probe_count_x,probe_count_y)) }

        {% if printer["gcode_macro status_meshing"] != null %}
            status_meshing
        {% endif %}

        {% if relative_reference_index == 0 or relative_reference_index == null %}
            _BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y}
        {% else %}
            {% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}
            { action_respond_info("relative_reference_index: %s" % relative_reference_index) }
            _BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}
        {% endif %}
    {% else %}
        {% if printer["gcode_macro status_meshing"] != null %}
            status_meshing
        {% endif %}
        _BED_MESH_CALIBRATE
    {% endif %}
    {% if klicky_available %}
        Dock_Probe
    {% elif euclid_available %}
        STOW_PROBE
    {% endif %}

  {% if printer["gcode_macro status_ready"] != null %}
    status_ready
  {% endif %}

# # # Klipper Adaptive Purging - VoronDesign Logo # # #
# credits: https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging/blob/main/Configuration/Adaptive_Purge.cfg
# credits: Insane Version 1.1 - 03-Feb-2023

[gcode_macro _ADAPTIVE_PURGE_V1]
description: A purge macro that adapts to be near your actual printed objects

variable_adaptive_enable: True      # Change to False if you'd like the purge to be in the same spot every print
variable_z_height: 0.3              # Height above the bed to purge
variable_tip_distance: 10           # Distance between filament tip and nozzle before purge (this will require some tuning)
variable_purge_amount: 30           # Amount of filament to purge
variable_flow_rate: 10              # Desired flow rate in mm3/s
variable_x_default: 5              # X location to purge, overwritten if adaptive is True
variable_y_default: 5              # Y location to purge, overwritten if adaptive is True
variable_size: 16                   # Size of the logo
variable_distance_to_object_x: 7   # Distance in x to the print area
variable_distance_to_object_y: 7   # Distance in y to the print area

gcode:
    {% if adaptive_enable == True %}
        {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
        {% set x_origin = (all_points | map(attribute=0) | min | default(x_default + distance_to_object_x + size)) - distance_to_object_x - size %}
        {% set y_origin = (all_points | map(attribute=1) | min | default(y_default + distance_to_object_y + size)) - distance_to_object_y - size %}
        {% set x_origin = ([x_origin, 0] | max) %}
        {% set y_origin = ([y_origin, 0] | max) %}
        
         {% if x_origin < x_default %}
            set x_origin = x_default | float
         {% endif %}
         
         {% if y_origin < y_default %}
            set y_origin = y_default | float
         {% endif %}

    {% else %}
        {% set x_origin = x_default | float %}
        {% set y_origin = y_default | float %}
    {% endif %}
    
    # Flow rate (mm3/s) = nozzle size(mm) x layer height(mm) x print speed(mm/s)
    # Filament Radius = 1.75mm / 2 = 0.875
    # cross sectional area = pi * (0.875)^2 = 2.405 mm2
    
    {% set purge_move_speed = 2.31 * size * flow_rate / (purge_amount * 2.405) %}
    {% set prepurge_speed = flow_rate / 2.405 %}
    {% set travel_speed = printer.toolhead.max_velocity %}
    { action_respond_info( "x: " + x_origin|string + " y: " + y_origin|string + " purge_move_speed: " + purge_move_speed|string + " prepurge_speed: " + prepurge_speed|string ) }

    G92 E0
    G90                                                                                 # Absolute positioning
    G0 X{x_origin} Y{y_origin+size/2} F3000                                             # Move to purge position
    G0 Z{z_height} F1500                                                                # Move to purge Z height
    G0 F3000                                                                            # Set travel speed
    M83                                                                                 # Relative extrusion mode
    G1 E{tip_distance} F{prepurge_speed*60}                                             # Move tip of filament to nozzle

    # Draw V1 logo outline
    G1 F600
    G1 X{x_origin+size*0.1976875} Y{y_origin+size*0.0538125} E{purge_amount*0.00362396204033215}
    G1 X{x_origin+size*0.2070625} Y{y_origin+size*0.056375} E{purge_amount*0.00348517200474496}
    G1 X{x_origin+size*0.273} Y{y_origin+size*0.0889375} E{purge_amount*0.0253226571767497}
    G1 X{x_origin+size*0.3568125} Y{y_origin+size*0.125125} E{purge_amount*0.0313760379596679}
    G1 X{x_origin+size*0.442375} Y{y_origin+size*0.1563125} E{purge_amount*0.0312455516014235}
    G1 X{x_origin+size*0.5295625} Y{y_origin+size*0.1825} E{purge_amount*0.0311731909845789}
    G1 X{x_origin+size*0.5311875} Y{y_origin+size*0.1829375} E{purge_amount*0.000575326215895611}
    G1 X{x_origin+size*0.6196875} Y{y_origin+size*0.2038125} E{purge_amount*0.0311376037959668}
    G1 X{x_origin+size*0.7093125} Y{y_origin+size*0.219625} E{purge_amount*0.0312253855278766}
    G1 X{x_origin+size*0.799875} Y{y_origin+size*0.2301875} E{purge_amount*0.0313368920521945}
    G1 X{x_origin+size*0.8735625} Y{y_origin+size*0.2349375} E{purge_amount*0.0254270462633452}
    G1 X{x_origin+size*0.8824375} Y{y_origin+size*0.237} E{purge_amount*0.00326809015421115}
    G1 X{x_origin+size*0.8913125} Y{y_origin+size*0.2390625} E{purge_amount*0.00339739027283511}
    G1 X{x_origin+size*0.8959375} Y{y_origin+size*0.2481875} E{purge_amount*0.00381494661921708}
    G1 X{x_origin+size*0.9005} Y{y_origin+size*0.257375} E{purge_amount*0.00366548042704626}
    G1 X{x_origin+size*0.951125} Y{y_origin+size*0.4463125} E{purge_amount*0.0668623962040332}
    G1 X{x_origin+size*0.9521875} Y{y_origin+size*0.4540625} E{purge_amount*0.00276156583629893}
    G1 X{x_origin+size*0.9531875} Y{y_origin+size*0.46175} E{purge_amount*0.00282443653618031}
    G1 X{x_origin+size*0.9528125} Y{y_origin+size*0.4654375} E{purge_amount*0.00138078291814947}
    G1 X{x_origin+size*0.9458125} Y{y_origin+size*0.4720625} E{purge_amount*0.00359193357058126}
    G1 X{x_origin+size*0.9388125} Y{y_origin+size*0.4786875} E{purge_amount*0.00342467378410439}
    G1 X{x_origin+size*0.9145625} Y{y_origin+size*0.4951875} E{purge_amount*0.00993950177935943}
    G1 X{x_origin+size*0.8395} Y{y_origin+size*0.547875} E{purge_amount*0.0316453143534994}
    G1 X{x_origin+size*0.7680625} Y{y_origin+size*0.6045} E{purge_amount*0.0314733096085409}
    G1 X{x_origin+size*0.700125} Y{y_origin+size*0.665125} E{purge_amount*0.0314483985765125}
    G1 X{x_origin+size*0.6358125} Y{y_origin+size*0.7295} E{purge_amount*0.0314317912218268}
    G1 X{x_origin+size*0.5755625} Y{y_origin+size*0.7971875} E{purge_amount*0.0312977461447212}
    G1 X{x_origin+size*0.5465} Y{y_origin+size*0.8325625} E{purge_amount*0.0155836298932384}
    G1 X{x_origin+size*0.492125} Y{y_origin+size*0.9056875} E{purge_amount*0.0313190984578885}
    G1 X{x_origin+size*0.451125} Y{y_origin+size*0.967125} E{purge_amount*0.0254341637010676}
    G1 X{x_origin+size*0.444625} Y{y_origin+size*0.9739375} E{purge_amount*0.00337959667852906}
    G1 X{x_origin+size*0.4380625} Y{y_origin+size*0.98075} E{purge_amount*0.00353262158956109}
    G1 X{x_origin+size*0.428125} Y{y_origin+size*0.98} E{purge_amount*0.00372123368920522}
    G1 X{x_origin+size*0.41825} Y{y_origin+size*0.97925} E{purge_amount*0.00354211150652432}
    G1 X{x_origin+size*0.22925} Y{y_origin+size*0.928625} E{purge_amount*0.0668837485172005}
    G1 X{x_origin+size*0.2204375} Y{y_origin+size*0.924125} E{purge_amount*0.00351601423487545}
    G1 X{x_origin+size*0.2115625} Y{y_origin+size*0.919625} E{purge_amount*0.00366903914590747}
    G1 X{x_origin+size*0.2091875} Y{y_origin+size*0.910625} E{purge_amount*0.00343179122182681}
    G1 X{x_origin+size*0.2068125} Y{y_origin+size*0.9016875} E{purge_amount*0.00329774614472123}
    G1 X{x_origin+size*0.2020625} Y{y_origin+size*0.82825} E{purge_amount*0.0253404507710558}
    G1 X{x_origin+size*0.1915} Y{y_origin+size*0.737625} E{purge_amount*0.0313582443653618}
    G1 X{x_origin+size*0.17575} Y{y_origin+size*0.6479375} E{purge_amount*0.0312431791221827}
    G1 X{x_origin+size*0.154875} Y{y_origin+size*0.5593125} E{purge_amount*0.0311791221826809}
    G1 X{x_origin+size*0.1544375} Y{y_origin+size*0.5576875} E{purge_amount*0.000575326215895611}
    G1 X{x_origin+size*0.12825} Y{y_origin+size*0.470625} E{purge_amount*0.0311328588374852}
    G1 X{x_origin+size*0.0970625} Y{y_origin+size*0.385125} E{purge_amount*0.0312253855278766}
    G1 X{x_origin+size*0.061} Y{y_origin+size*0.3014375} E{purge_amount*0.0313190984578885}
    G1 X{x_origin+size*0.02825} Y{y_origin+size*0.2351875} E{purge_amount*0.0254483985765125}
    G1 X{x_origin+size*0.025625} Y{y_origin+size*0.226125} E{purge_amount*0.00338671411625148}
    G1 X{x_origin+size*0.023} Y{y_origin+size*0.2170625} E{purge_amount*0.00352313167259787}
    G1 X{x_origin+size*0.028625} Y{y_origin+size*0.208875} E{purge_amount*0.00370937129300119}
    G1 X{x_origin+size*0.03425} Y{y_origin+size*0.200625} E{purge_amount*0.003570581257414}
    G1 X{x_origin+size*0.1725625} Y{y_origin+size*0.0623125} E{purge_amount*0.0668623962040332}
    G1 X{x_origin+size*0.1804375} Y{y_origin+size*0.0568125} E{purge_amount*0.00343297746144721}
    G1 X{x_origin+size*0.18375} Y{y_origin+size*0.0545} E{purge_amount*0.00150652431791222}


    G92 E0                                                                              # Reset extruder distance
    M82                                                                                 # Absolute extrusion mode
    G0 Z{z_height*2}                                                                    # Z hop
    {% if printer["gcode_macro status_printing"] != null %}
        status_printing
    {% endif %}
    
[gcode_macro CANCEL_PRINT]
gcode:
  PRINT_END

[gcode_macro PRINT_END]
gcode:
  M400  ;Clear buffer
  TURN_OFF_HEATERS  ;Turn off heaters
  M106 S0  ;Part cooling fan speed
  PARK_CENTER_REAR  ;Park central rear
  G0 Z229 F3000  ;Move Up

[gcode_macro PARK_CENTER_REAR]
gcode:
    {% if printer["gcode_macro status_busy"] != null %}
      status_busy
    {% endif %}
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}

    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  
    {% if printer["gcode_macro status_ready"] != null %}
    status_ready
    {% endif %}

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    G0 Z10
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} #ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

[led_effect progress_bar]
leds:
    neopixel:back
autostart:                          true
frame_rate:                         24
layers:
    progress  -1  0 add         ( 0, 0,   1),( 0, 0.1, 0.6)
    static     0  0 top         ( 0, 0, 0.1)

[gcode_macro update_git]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh $0"
timeout: 90.0
verbose: True

[gcode_macro CLEAN_NOZZLE]
variable_start_x: -14
variable_start_y: 130
variable_start_z: 11
variable_wipe_dist: 60
variable_wipe_qty: 10
variable_wipe_spd: 200
variable_raise_distance: 20

gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}
 
 G90                                            ; absolute positioning
 ## Move nozzle to start position
 G1 X{start_x} Y{start_y} F6000
 G1 Z{start_z} F1500

 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   G1 Y{start_y + wipe_dist} F{wipe_spd * 60}
   G1 Y{start_y} F{wipe_spd * 60}
 {% endfor %}

 ## Raise nozzle
 G1 Z{raise_distance}

[gcode_macro _PURGE_CLEAN_NOZZLE]
variable_start_x: -14
variable_start_y: 130
variable_start_z: 10
variable_wipe_dist: 60
variable_wipe_qty: 10
variable_wipe_spd: 200
variable_raise_distance: 20

gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}
 
 G90                                            ; absolute positioning
 ## Move nozzle to start position
 G1 X{start_x} Y{start_y} F6000
 G1 Z{start_z} F1500

 G1 Y125 F6000 ; Move nozzle over purge bucket
 G1 E30 F1000 ; Nozzle Purge
 G4 P2500 ; Finish oozing

 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   G1 Y{start_y + wipe_dist} F{wipe_spd * 60}
   G1 Y{start_y} F{wipe_spd * 60}
 {% endfor %}

 ## Raise nozzle
 G1 Z{raise_distance}

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 16.610
#*# pid_ki = 0.527
#*# pid_kd = 130.805
#*#
#*# [bltouch]
#*# z_offset = 1.100
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.136663, 0.121663, 0.096663
#*# 	  0.216663, 0.181663, 0.141663
#*# 	  0.271663, 0.241663, 0.181663
#*# x_count = 3
#*# y_count = 3
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = lagrange
#*# tension = 0.2
#*# min_x = 115.0
#*# max_x = 185.0
#*# min_y = 115.03
#*# max_y = 184.97
